const {gql} = require('apollo-server-express');

module.exports.typeDefs = gql`
    type Query {
        achievements(type:AchievementsTypes,id:ID,name:String):[Achievements!]
        profiles(alid:Int,username:String):[Profile!]
        levels(level:Int):[Level]
        globalstats(name:String):[GlobalStats]
    }
    type Mutation{
        updateProfile(alid:Int!):[Profile]
        createProfile(username:String!,alid:Int!):[Profile]
    }
    type Achievements{
        _id:ID
        name:String!
        description:String!
        min:Int!
        max:Int
        image:String!
        type:AchievementsTypes!
        tier:Int!
        xp:Int
    }
    type Profile{
        _id:ID
        alid:Int!
        username:String!
        avatar:String!
        banner:String
        lastupdated:String!
        xp:Int
        level:Int
        chuunibyou:Int
        updating:Boolean
        stats:[ProfileStats]
        achievements:[ProfileCompleted!]
    }
    type Level{
        level:Int
        min:Int
        max:Int
    }
    type ProfileStats{
        completed:Int
        dropped:Int
        meanScore:String
        minutesWatched:Int
        episodesWatched:Int
        magicalGirlWatched:Int
        actionWatched:Int
        comedyWatched:Int
        dramaWatched:Int
        romanceWatched:Int
        sliceOfLifeWatched:Int
        fantasyWatched:Int
        supernaturalWatched:Int
        sciFiWatched:Int
        adventureWatched:Int
        mysteryWatched:Int
        ecchiWatched:Int
        psychologicalWatched:Int
        musicWatched:Int
        thrillerWatched:Int
        horrorWatched:Int
        mechaWatched:Int
        sportsWatched:Int
        degenerate:Int
        tvWatched:Int
        movieWatched:Int
        ovaWatched:Int
        specialWatched:Int
        tvshortWatched:Int
        onaWatched:Int
        musicFormatWatched:Int
        followers:Int,
        likes:Int,
        averageFormatScore:String,
        averageGenreScore:String,
        averageTagScore:String,
        scores:[Scores]
    }
    type ProfileCompleted{
        alid:Int!
        passedtier:String
        droppedtier:String
        magicalgirltier:String
        actiontier:String
        comedytier:String
        dramatier:String
        romancetier:String
        sliceOfLifetier:String
        fantasytier:String
        supernaturaltier:String
        sciFitier:String
        adventuretier:String
        mysterytier:String
        ecchitier:String
        psychologicaltier:String
        musictier:String
        thrillertier:String
        horrortier:String
        mechatier:String
        sportstier:String
    }
    type Scores{
        alid:Int,
        scoreType:ScoreType,
        score1:Int,
        score2:Int,
        score3:Int,
        score4:Int,
        score5:Int,
        score6:Int,
        score7:Int,
        score8:Int,
        score9:Int,
        score10:Int,
        score15:Int,
        score20:Int,
        score25:Int,
        score30:Int,
        score35:Int,
        score40:Int,
        score45:Int,
        score50:Int,
        score55:Int,
        Score60:Int,
        score65:Int,
        score70:Int,
        score75:Int,
        score80:Int,
        score85:Int,
        score90:Int,
        score95:Int,
        score100:Int
    }
    type GlobalStats{
        name:String,
        count:Int
    }
    enum AchievementsTypes{
        PASSED
        DROPPED
        GHIBLI
        MAGICAL_GIRL
        ACTION
        COMEDY
        DRAMA
        ROMANCE
        SLICE_OF_LIFE
        FANTASY
        SUPERNATURAL
        SCI_FI
        ADVENTURE
        MYSTERY
        ECCHI
        PSYCHOLOGICAL
        MUSIC
        THRILLER
        HORROR
        MECHA
        SPORTS
    }
    enum ScoreType{
        POINT_100
        POINT_3
        POINT_10_DECIMAL
        POINT_5
        POINT_10
    }
`;